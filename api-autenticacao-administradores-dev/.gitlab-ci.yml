stages:
  - build
  - test
  - package
  - deploy

maven-build:
  image: maven:3.8.3-openjdk-17
  stage: build
  script: "mvn package -Dmaven.test.skip -B"
  artifacts:
    paths:
      - target/*.jar

test:
  image: maven:3.8.3-openjdk-17
  stage: test
  script: "mvn test"
  artifacts:
    paths:
      - target/*.jar
  dependencies:
    - maven-build

docker-build:
  stage: package
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - docker build -t $APP_IMAGE -f Dockerfile .
    - docker push $APP_IMAGE
  only:
    - dev
    - main
  dependencies:
    - test

deploy-kubernetes:
  image: alpine/ansible
  stage: deploy
  before_script:
    # Adicionando ssh-agent
    - apk add openssh-client
    - eval $(ssh-agent -s)
    - echo "$K8S_CLUSTER_SECRET" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # Criando arquivo pem de acesso ao cluster
    - echo "$K8S_CLUSTER_SECRET" | tr -d '\r' >> k8s-deploy/k8s-alunos-ilab.pem
    - chmod 400 k8s-deploy/k8s-alunos-ilab.pem
    - apk add sed
  script:
    # Adicionando dados sensíveis ao arquivo de deploy
    - sed -i "s/<EMISSOR>/$EMISSOR/g" k8s-deploy/deploy.yml
    - sed -i "s/<PRIVATE-KEY>/$PRIVATE_KEY/g" k8s-deploy/deploy.yml
    - sed -i "s/<SECRET-KEY>/$SECRET_KEY/g" k8s-deploy/deploy.yml
    - sed -i "s/<TOKEN-PREFIX>/$TOKEN_PREFIX/g" k8s-deploy/deploy.yml
    - sed -i "s/<EXPIRATION-SECONDS>/$EXPIRATION_SECONDS/g" k8s-deploy/deploy.yml
    - sed -i "s/<EXPIRATION-MINUTES>/$EXPIRATION_MINUTES/g" k8s-deploy/deploy.yml
    - sed -i "s/<EXPIRATION-HOURS>/$EXPIRATION_HOURS/g" k8s-deploy/deploy.yml
    - sed -i "s/<EXPIRATION-DAYS>/$EXPIRATION_DAYS/g" k8s-deploy/deploy.yml
    # Mandando arquivo de deploy para o cluster com ansible
    - cd k8s-deploy
    - echo "$CLUSTER_URL" >> hosts
    - ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i hosts ansible.yml -u ubuntu --private-key ./k8s-alunos-ilab.pem
    - cd ..
    # Executando deploy no cluster e removendo o arquivo de deploy da máquina do cluster
    - ssh -o StrictHostKeyChecking=no $CLUSTER_URL "kubectl apply -f ./grupo01/deploy.yml -n grupo01"
    - ssh -o StrictHostKeyChecking=no $CLUSTER_URL "rm ./grupo01/deploy.yml -f"
  only:
    - main
  dependencies:
    - docker-build
